#pragma kernel LineDetector

struct Line
{
    float x1;
    float y1;
    float x2;
    float y2;
};

RWStructuredBuffer<float> lines;
RWStructuredBuffer<Line> result;
RWStructuredBuffer<uint> lineCount;

int width;
int height;
float threshold;
float minLength;
float maxGap;

#define HOUGH_THRESHOLD 50
#define HOUGH_RHO 1.0
#define HOUGH_THETA 0.0174532925 // PI/180

[numthreads(8,8,1)]
void LineDetector (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.y * width + id.x;
    if (idx >= width * height) return;

    // Check if this pixel is an edge
    if (lines[idx] < threshold) return;

    // Calculate line parameters using Hough transform
    float rho = id.x * HOUGH_RHO;
    float theta = id.y * HOUGH_THETA;

    // Calculate line endpoints
    float a = cos(theta);
    float b = sin(theta);
    float x0 = a * rho;
    float y0 = b * rho;

    // Clip line to image bounds
    float x1 = x0 + 1000 * (-b);
    float y1 = y0 + 1000 * (a);
    float x2 = x0 - 1000 * (-b);
    float y2 = y0 - 1000 * (a);

    // Clip to image bounds
    float t1 = 0, t2 = 1;
    if (x1 != x2)
    {
        t1 = max(0, min(1, (0 - x1) / (x2 - x1)));
        t2 = max(0, min(1, (width - x1) / (x2 - x1)));
    }
    if (y1 != y2)
    {
        t1 = max(t1, min(1, (0 - y1) / (y2 - y1)));
        t2 = min(t2, max(0, (height - y1) / (y2 - y1)));
    }

    x1 = x1 + t1 * (x2 - x1);
    y1 = y1 + t1 * (y2 - y1);
    x2 = x1 + t2 * (x2 - x1);
    y2 = y1 + t2 * (y2 - y1);

    // Check line length
    float length = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    if (length < minLength) return;

    // Add line to result buffer
    uint resultIdx;
    InterlockedAdd(lineCount[0], 1, resultIdx);
    if (resultIdx < 1000) // Max lines limit
    {
        result[resultIdx].x1 = x1;
        result[resultIdx].y1 = y1;
        result[resultIdx].x2 = x2;
        result[resultIdx].y2 = y2;
    }
} 