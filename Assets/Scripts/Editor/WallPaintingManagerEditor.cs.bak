using UnityEngine;
using UnityEditor;
using Remalux.AR;
using System.IO;
using System.Collections.Generic;
using UnityEngine.UI;

[CustomEditor(typeof(WallPaintingManager))]
public class WallPaintingManagerEditor : Editor
{
      public override void OnInspectorGUI()
      {
            WallPaintingManager manager = (WallPaintingManager)target;

            // Рисуем стандартный инспектор
            DrawDefaultInspector();

            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Инструменты", EditorStyles.boldLabel);

            // Кнопка для автоматического поиска материалов
            if (GUILayout.Button("Найти материалы в проекте"))
            {
                  FindMaterialsInProject(manager);
            }

            // Кнопка для создания тестовых материалов
            if (GUILayout.Button("Создать тестовые материалы"))
            {
                  CreateTestMaterials(manager);
            }

            // Кнопка для настройки компонентов
            if (GUILayout.Button("Настроить компоненты"))
            {
                  SetupComponents(manager);
            }
      }

      private void FindMaterialsInProject(WallPaintingManager manager)
      {
            // Ищем все материалы в проекте
            string[] guids = AssetDatabase.FindAssets("t:Material");
            List<Material> materials = new List<Material>();

            foreach (string guid in guids)
            {
                  string path = AssetDatabase.GUIDToAssetPath(guid);
                  Material material = AssetDatabase.LoadAssetAtPath<Material>(path);

                  // Фильтруем материалы, которые могут быть использованы для покраски
                  // Например, по имени или свойствам
                  if (material.name.Contains("Paint") || material.name.Contains("Color") ||
                      material.name.Contains("Wall") || material.HasProperty("_Color"))
                  {
                        materials.Add(material);
                  }
            }

            if (materials.Count > 0)
            {
                  manager.paintMaterials = materials.ToArray();
                  EditorUtility.SetDirty(manager);
                  Debug.Log($"Найдено {materials.Count} материалов для покраски");
            }
            else
            {
                  Debug.LogWarning("Не найдено подходящих материалов в проекте");
            }
      }

      private void CreateTestMaterials(WallPaintingManager manager)
      {
            // Создаем папку для материалов, если ее нет
            string folderPath = "Assets/Materials/PaintMaterials";
            if (!Directory.Exists(Application.dataPath + "/Materials/PaintMaterials"))
            {
                  Directory.CreateDirectory(Application.dataPath + "/Materials/PaintMaterials");
                  AssetDatabase.Refresh();
            }

            // Создаем базовые цвета
            Color[] colors = new Color[]
            {
            Color.red,
            Color.green,
            Color.blue,
            Color.yellow,
            Color.cyan,
            Color.magenta,
            new Color(1.0f, 0.5f, 0.0f), // Оранжевый
            new Color(0.5f, 0.0f, 0.5f), // Фиолетовый
            Color.white,
            Color.gray
            };

            List<Material> materials = new List<Material>();

            for (int i = 0; i < colors.Length; i++)
            {
                  string materialName = $"Paint_{i + 1}";
                  string materialPath = $"{folderPath}/{materialName}.mat";

                  // Проверяем, существует ли уже такой материал
                  Material material = AssetDatabase.LoadAssetAtPath<Material>(materialPath);
                  if (material == null)
                  {
                        // Создаем новый материал
                        material = new Material(Shader.Find("Standard"));
                        material.color = colors[i];
                        AssetDatabase.CreateAsset(material, materialPath);
                  }
                  else
                  {
                        // Обновляем существующий материал
                        material.color = colors[i];
                        EditorUtility.SetDirty(material);
                  }

                  materials.Add(material);
            }

            // Устанавливаем материалы в менеджер
            manager.paintMaterials = materials.ToArray();

            // Устанавливаем материал по умолчанию, если он не задан
            if (manager.defaultWallMaterial == null && materials.Count > 0)
            {
                  manager.defaultWallMaterial = materials[0];
            }

            EditorUtility.SetDirty(manager);
            AssetDatabase.SaveAssets();
            Debug.Log($"Создано {materials.Count} тестовых материалов для покраски");
      }

      private void SetupComponents(WallPaintingManager manager)
      {
            // Находим или создаем WallPainter
            if (manager.wallPainter == null)
            {
                  WallPainter wallPainter = FindObjectOfType<WallPainter>();
                  if (wallPainter == null)
                  {
                        GameObject wallPainterObj = new GameObject("WallPainter");
                        wallPainter = wallPainterObj.AddComponent<WallPainter>();
                        Debug.Log("Создан новый WallPainter");
                  }
                  manager.wallPainter = wallPainter;
            }

            // Находим или создаем SimplePaintColorSelector
            if (manager.colorSelector == null)
            {
                  SimplePaintColorSelector colorSelector = FindObjectOfType<SimplePaintColorSelector>();
                  if (colorSelector == null)
                  {
                        // Создаем UI для селектора цветов
                        GameObject canvasObj = GameObject.Find("Canvas");
                        if (canvasObj == null)
                        {
                              canvasObj = new GameObject("Canvas");
                              Canvas canvas = canvasObj.AddComponent<Canvas>();
                              canvas.renderMode = RenderMode.ScreenSpaceOverlay;
                              canvasObj.AddComponent<CanvasScaler>();
                              canvasObj.AddComponent<GraphicRaycaster>();
                        }

                        GameObject selectorObj = new GameObject("PaintColorSelector");
                        selectorObj.transform.SetParent(canvasObj.transform, false);
                        RectTransform rectTransform = selectorObj.AddComponent<RectTransform>();
                        rectTransform.anchorMin = new Vector2(0, 0);
                        rectTransform.anchorMax = new Vector2(1, 0.2f);
                        rectTransform.offsetMin = new Vector2(0, 0);
                        rectTransform.offsetMax = new Vector2(0, 0);

                        colorSelector = selectorObj.AddComponent<SimplePaintColorSelector>();
                        Debug.Log("Создан новый SimplePaintColorSelector");
                  }
                  manager.colorSelector = colorSelector;
            }

            // Настраиваем UI
            if (manager.paintingUI == null)
            {
                  if (manager.colorSelector != null)
                  {
                        manager.paintingUI = manager.colorSelector.gameObject;
                  }
                  else
                  {
                        GameObject canvasObj = GameObject.Find("Canvas");
                        if (canvasObj != null)
                        {
                              manager.paintingUI = canvasObj;
                        }
                  }
            }

            // Передаем материалы в компоненты
            if (manager.wallPainter != null && manager.paintMaterials != null && manager.paintMaterials.Length > 0)
            {
                  manager.wallPainter.availablePaints = manager.paintMaterials;
                  manager.wallPainter.defaultMaterial = manager.defaultWallMaterial;
            }

            if (manager.colorSelector != null && manager.colorSelector is SimplePaintColorSelector)
            {
                  SimplePaintColorSelector selector = manager.colorSelector as SimplePaintColorSelector;
                  selector.paintMaterials = manager.paintMaterials;
                  selector.wallPainter = manager.wallPainter;
            }

            EditorUtility.SetDirty(manager);
            Debug.Log("Компоненты настроены");
      }
}